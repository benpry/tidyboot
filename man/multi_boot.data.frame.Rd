% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyboot.R
\name{multi_boot.data.frame}
\alias{multi_boot.data.frame}
\title{Non-parametric bootstrap for data frames}
\usage{
\method{multi_boot}{data.frame}(data, summary_function = "mean",
  column = NULL, summary_groups = NULL, statistics_functions,
  statistics_groups = summary_groups, nboot = 1000, size = 1,
  replace = TRUE, ...)
}
\arguments{
\item{data}{A data frame.}

\item{summary_function}{A function to be computed over each set of samples as a data frame, or a
string that is the name of the function to be computed over each set of samples as a single column of
a data frame indicated by \code{column} (defaults to \code{mean}).}

\item{column}{A string indicating the column of \code{data} to bootstrap over (only necessary if
\code{summary_function} is a string).}

\item{summary_groups}{A vector of strings that are column names of \code{data} indicating how it should
be grouped before applying \code{summary_function}.}

\item{statistics_functions}{A function to be computed over the data frame of summary values from all
samples, or a vector of strings that are names of functions to be computed over the vector of
summary values from all samples.}

\item{statistics_groups}{A vector of strings that are column names of \code{data} indicating how it should
be grouped before applying \code{statistics_functions} (defaults to \code{summary_groups}).}

\item{nboot}{The number of bootstrap samples to take (defaults to \code{1000}).}

\item{size}{The fraction of rows to sample (defaults to 1).}

\item{replace}{Logical indicating whether to sample with replacement (defaults to \code{TRUE}).}

\item{...}{Other arguments passed from generic.}
}
\description{
Computes arbitrary bootstrap statistics on univariate data.
}
\examples{
## Mean and 95\% confidence interval for 1000 samples from two different normal distributions
require(dplyr)
gauss1 <- data.frame(value = rnorm(1000, mean = 0, sd = 1), condition = 1)
gauss2 <- data.frame(value = rnorm(1000, mean = 2, sd = 3), condition = 2)
ci_lower <- function(x) {quantile(x, 0.025)}
ci_upper <- function(x) {quantile(x, 0.975)}
multi_boot(data = bind_rows(gauss1, gauss2),
           summary_function = "mean", column = "value", summary_groups = "condition",
           statistics_functions = c("ci_lower", "mean", "ci_upper"))
multi_boot(data = bind_rows(gauss1, gauss2),
           summary_function = function(df) summarise(df, mean = mean(value)),
           summary_groups = c("condition"),
           statistics_functions = function(df) summarise_each(df,
                                                              funs("ci_upper", "mean", "ci_lower"),
                                                              mean),
           statistics_groups = c("condition"),
           nboot = 100, replace = TRUE)
}
